apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: prometheus
spec:
  generators:
    - git:
        repoURL: https://github.com/opspresso/argocd-env-demo.git
        revision: HEAD
        files:
          - path: "env/addons/alpha/**/config.yaml"

  template:
    metadata:
      name: "prometheus-{{cluster}}"
      annotations:
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: noti-argocd-{{cluster_env}}-addon
      labels:
        app.kubernetes.io/instance: "addons-{{cluster}}"
        krmt.io/cluster: "{{cluster}}"
        krmt.io/group: "addons"
    spec:
      project: addons
      destination:
        name: "{{cluster}}"
        namespace: addon-prometheus
      source:
        repoURL: https://prometheus-community.github.io/helm-charts
        targetRevision: "19.3.0"
        chart: kube-prometheus-stack
        helm:
          values: |-
            fullnameOverride: prometheus

            # prometheusOperator:
            #   tolerations:
            #     - key: group
            #       operator: Equal
            #       value: monitoring
            #       effect: NoSchedule
            #   nodeSelector:
            #     group: monitoring

            prometheus:
              prometheusSpec:
                storageSpec:
                  volumeClaimTemplate:
                    spec:
                      storageClassName: gp3
                      accessModes: ["ReadWriteOnce"]
                      resources:
                        requests:
                          storage: 50Gi

                resources:
                  requests:
                    cpu: "1"
                    memory: 4Gi
                  limits:
                    cpu: "2"
                    memory: 8Gi

                # tolerations:
                #   - key: group
                #     operator: Equal
                #     value: monitoring
                #     effect: NoSchedule
                nodeSelector:
                  # group: monitoring
                  topology.kubernetes.io/zone: {{aws_region}}c

            alertmanager:
              config:
                route:
                  receiver: "slack"
                  routes:
                    - match:
                        alertname: Watchdog
                      receiver: "slack"

                receivers:
                  - name: "null"
                  - name: "slack"
                    slack_configs:
                      - channel: '#sandbox'
                        api_url_file: /etc/alertmanager/secrets/prometheus-alertmanager-secret/slack-hooks
                        color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
                        icon_url: https://avatars3.githubusercontent.com/u/3380462
                        send_resolved: true

                        title: "{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}"
                        text: "{{ range .Alerts }}{{ .Annotations.description }}\n{{ end }}"

                        # title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
                        # text: |
                        #   {{ range .Alerts }}
                        #   *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
                        #   *Cluster:* `{{cluster}}`
                        #   *Description:* {{ .Annotations.description }}
                        #   *Details:*
                        #     {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* {{ .Value }}
                        #     {{ end }}
                        #   {{ end }}

              alertmanagerSpec:
                secrets:
                  - prometheus-alertmanager-secret

                storage:
                  volumeClaimTemplate:
                    spec:
                      storageClassName: gp3
                      accessModes: ["ReadWriteOnce"]
                      resources:
                        requests:
                          storage: 50Gi

                # tolerations:
                #   - key: group
                #     operator: Equal
                #     value: monitoring
                #     effect: NoSchedule
                nodeSelector:
                  # group: monitoring
                  topology.kubernetes.io/zone: {{aws_region}}c

            kube-state-metrics:
              fullnameOverride: kube-state-metrics

              # https://github.com/kubernetes/kube-state-metrics/blob/master/docs/cli-arguments.md
              extraArgs:
                - --metric-labels-allowlist=nodes=[*],namespaces=[*],deployments=[*],pods=[*],services=[*]

              # tolerations:
              #   - key: group
              #     operator: Equal
              #     value: monitoring
              #     effect: NoSchedule
              # nodeSelector:
              #   group: monitoring

            prometheus-node-exporter:
              fullnameOverride: prometheus-node-exporter

            grafana:
              enabled: false

      ignoreDifferences:
        - kind: MutatingWebhookConfiguration
          group: admissionregistration.k8s.io
          jsonPointers:
            - /webhooks/0/clientConfig/caBundle
            - /webhooks/0/failurePolicy

        - kind: ValidatingWebhookConfiguration
          group: admissionregistration.k8s.io
          jsonPointers:
            - /webhooks/0/clientConfig/caBundle
            - /webhooks/0/failurePolicy

      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
