apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: prometheus
spec:
  generators:
    - list:
        elements:
          - cluster: eks-demo
            values:
              host: "bruce.spic.me"

  template:
    metadata:
      name: "prometheus-{{cluster}}"
      annotations:
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: noti-argocd-alpha-addon
      labels:
        app.kubernetes.io/instance: "addons-{{cluster}}"
        krmt.io/cluster: "{{cluster}}"
        krmt.io/group: "addons"
    spec:
      project: default
      destination:
        name: "{{cluster}}"
        namespace: addon-prometheus
      source:
        repoURL: https://prometheus-community.github.io/helm-charts
        targetRevision: "18.0.1"
        chart: kube-prometheus-stack
        helm:
          values: |-
            fullnameOverride: prometheus

            prometheusOperator:
              tolerations:
                - key: group
                  operator: Equal
                  value: monitoring
                  effect: NoSchedule
              nodeSelector:
                group: monitoring

            prometheus:
              prometheusSpec:
                storageSpec:
                  volumeClaimTemplate:
                    spec:
                      storageClassName: gp3
                      accessModes: ["ReadWriteOnce"]
                      resources:
                        requests:
                          storage: 50Gi

                # serviceMonitorSelector:
                #   matchLabels:
                #     release: prometheus-{{cluster}}

                # resources:
                #   requests:
                #     cpu: "1"
                #     memory: 2Gi
                #   limits:
                #     cpu: "1"
                #     memory: 3Gi

                tolerations:
                  - key: group
                    operator: Equal
                    value: monitoring
                    effect: NoSchedule
                nodeSelector:
                  group: monitoring

            alertmanager:
              config:
                global:
                  slack_api_url: $slack-token

                route:
                  receiver: "slack"
                  routes:
                    - match:
                        alertname: Watchdog
                      receiver: "null"
                    - match:
                      receiver: "slack"
                      continue: false

                receivers:
                  - name: "null"
                  - name: "slack"
                    slack_configs:
                      - channel: "#sandbox"
                        color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
                        icon_url: https://avatars3.githubusercontent.com/u/3380462
                        send_resolved: true
                        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
                        text: |
                          {{ range .Alerts }}
                          *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`

                          *Cluster:* `{{cluster}}`

                          *Description:* {{ .Annotations.description }}

                          *Details:*
                            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* {{ .Value }}
                            {{ end }}
                          {{ end }}

              alertmanagerSpec:
                secrets:
                  - prometheus-alertmanager-secret

                storage:
                  volumeClaimTemplate:
                    spec:
                      storageClassName: gp3
                      accessModes: ["ReadWriteOnce"]
                      resources:
                        requests:
                          storage: 12Gi

                tolerations:
                  - key: group
                    operator: Equal
                    value: monitoring
                    effect: NoSchedule
                nodeSelector:
                  group: monitoring

            grafana:
              fullnameOverride: prometheus-grafana

              admin:
                existingSecret: "prometheus-grafana-secret"

              grafana.ini:
                # https://grafana.com/docs/grafana/latest/auth/google/
                auth.google:
                  enabled: false
                  allow_sign_up: true
                  client_id: GOOGLE_CLIENT_ID
                  client_secret: GOOGLE_CLIENT_SECRET
                  scopes: https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
                  auth_url: https://accounts.google.com/o/oauth2/auth
                  token_url: https://accounts.google.com/o/oauth2/token
                  allowed_domains: nalbam.com

                # https://grafana.com/docs/grafana/latest/auth/github/
                auth.github:
                  enabled: true
                  allow_sign_up: true
                  client_id: bd889ee6939aad541bcb
                  client_secret: GITHUB_CLIENT_SECRET
                  scopes: user:email,read:org
                  auth_url: https://github.com/login/oauth/authorize
                  token_url: https://github.com/login/oauth/access_token
                  api_url: https://api.github.com/user
                  allowed_organizations: opspresso
                  team_ids: sre

              ingress:
                enabled: false
                annotations:
                  kubernetes.io/ingress.class: nginx
                  nginx.ingress.kubernetes.io/ssl-redirect: "true"
                hosts:
                  - "grafana.{{values.host}}"

              dashboardProviders:
                dashboardproviders.yaml:
                  apiVersion: 1
                  providers:
                  - name: 'default'
                    orgId: 1
                    folder: ''
                    type: file
                    disableDeletion: false
                    editable: true
                    options:
                      path: /var/lib/grafana/dashboards/default

              dashboards:
                default:
                  kube-cluster:
                    gnetId: 9797
                    revision: 16
                    datasource: Prometheus
                  kube-deploy:
                    gnetId: 9679
                    revision: 12
                    datasource: Prometheus
                  kube-sts:
                    gnetId: 14902
                    revision: 2
                    datasource: Prometheus

                  nginx-ingress:
                    url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
                    datasource: Prometheus
                  argo-cd:
                    url: https://raw.githubusercontent.com/argoproj/argo-cd/master/examples/dashboard.json
                    datasource: Prometheus
                  argo-rollouts:
                    url: https://raw.githubusercontent.com/argoproj/argo-rollouts/master/examples/dashboard.json
                    datasource: Prometheus

              persistence:
                enabled: true
                type: pvc
                storageClassName: gp3
                accessModes:
                  - ReadWriteOnce
                size: 10Gi

              tolerations:
                - key: group
                  operator: Equal
                  value: monitoring
                  effect: NoSchedule
              nodeSelector:
                group: monitoring

      ignoreDifferences:
        - kind: MutatingWebhookConfiguration
          group: admissionregistration.k8s.io
          jsonPointers:
            - /webhooks/0/clientConfig/caBundle
            - /webhooks/0/failurePolicy

        - kind: ValidatingWebhookConfiguration
          group: admissionregistration.k8s.io
          jsonPointers:
            - /webhooks/0/clientConfig/caBundle
            - /webhooks/0/failurePolicy

      syncPolicy:
        # automated:
        #   prune: true
        #   selfHeal: true
        syncOptions:
          - CreateNamespace=true
