apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argocd
spec:
  generators:
    - git:
        repoURL: https://github.com/opspresso/argocd-env-demo.git
        revision: HEAD
        files:
          - path: "env/ops/alpha/*.yaml"

  template:
    metadata:
      name: "argocd"
      annotations:
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: noti-argocd-{{cluster_env}}-addon
      labels:
        app.kubernetes.io/instance: "addons-{{cluster}}"
        krmt.io/cluster: "{{cluster}}"
        krmt.io/group: "addons"
    spec:
      project: addons
      destination:
        name: "{{cluster}}"
        namespace: argocd
      source:
        repoURL: https://argoproj.github.io/argo-helm
        targetRevision: "4.0.0"
        chart: argo-cd
        helm:
          values: |-
            fullnameOverride: argocd

            controller:
              resources:
                requests:
                  cpu: 250m
                  memory: 512Mi
                limits:
                  cpu: 500m
                  memory: 1Gi

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            server:
              replicas: 2

              autoscaling:
                enabled: true
                minReplicas: 2
                maxReplicas: 4
                targetCPUUtilizationPercentage: 60
                targetMemoryUtilizationPercentage: 60

              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 200m
                  memory: 512Mi

              service:
                type: LoadBalancer
                annotations:
                  external-dns.alpha.kubernetes.io/hostname: "{{argocd.hostname}}"
                  service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
                  service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
                  service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "{{argocd.acm_arn}}"
                  service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"

              extraArgs:
                - --insecure

              config:
                url: https://{{argocd.hostname}}

                statusbadge.enabled: "true"

                help.chatUrl: "{{argocd.chatUrl}}"
                help.chatText: "Chat now!"

                dex.config: |
                  connectors:
                  - type: github
                    id: github
                    name: github
                    config:
                      clientID: $dex.github.clientId
                      clientSecret: $dex.github.clientSecret
                      teamNameField: slug
                      orgs:
                        - name: {{argocd.github.org}}
                  staticClients:
                  - id: argo-workflows-sso
                    name: Argo Workflow
                    redirectURIs:
                      - https://argo-workflows.{{hostname.public}}/oauth2/callback
                    secretEnv: ARGO_WORKFLOWS_SSO_CLIENT_SECRET

              rbacConfig:
                policy.default: "role:readonly"
                policy.csv: |
                  g, {{argocd.github.org}}:{{argocd.github.team}}, role:admin

              additionalProjects:
                - name: addons
                  namespace: argocd
                  description: addons project
                  sourceRepos:
                    - "*"
                  destinations:
                    - namespace: "*"
                      server: "*"
                  clusterResourceWhitelist:
                    - group: "*"
                      kind: "*"

                - name: apps
                  namespace: argocd
                  description: apps project
                  sourceRepos:
                    - "*"
                  destinations:
                    - namespace: "*"
                      server: "*"
                  clusterResourceWhitelist:
                    - group: "*"
                      kind: "*"

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            repoServer:
              replicas: 2

              autoscaling:
                enabled: true
                minReplicas: 2
                maxReplicas: 4
                targetCPUUtilizationPercentage: 60
                targetMemoryUtilizationPercentage: 60

              resources:
                requests:
                  cpu: 250m
                  memory: 512Mi
                limits:
                  cpu: 500m
                  memory: 1Gi

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            dex:
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
                limits:
                  cpu: 100m
                  memory: 256Mi

              env:
                - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: argocd-secret
                      key: argo-workflows-client-secret

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            redis:
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
                limits:
                  cpu: 100m
                  memory: 256Mi

            configs:
              secret:
                createSecret: false

              repositories:
                - name: env-demo
                  type: git
                  url: https://github.com/opspresso/argocd-env-demo
                - name: opspresso
                  type: helm
                  url: https://opspresso.github.io/helm-charts

            extraObjects:
              - apiVersion: kubernetes-client.io/v1
                kind: ExternalSecret
                metadata:
                  name: argocd-secret
                spec:
                  backendType: systemManager
                  data:
                    - key: /k8s/common/argocd-password
                      name: admin.password
                    - key: /k8s/common/argocd-mtime
                      name: admin.passwordMtime
                    - key: /k8s/{{argocd.github.org}}/argocd-github-id
                      name: dex.github.clientId
                    - key: /k8s/{{argocd.github.org}}/argocd-github-secret
                      name: dex.github.clientSecret
                    - key: /k8s/common/argocd-webhook
                      name: webhook.github.secret
                    - key: /k8s/common/argocd-server-secret
                      name: server.secretkey
                    - key: /k8s/common/google-id
                      name: dex.google.clientId
                    - key: /k8s/common/google-secret
                      name: dex.google.clientSecret
                    - key: /k8s/common/argo-workflows-client-secret
                      name: argo-workflows-client-secret
                    - key: /k8s/common/argocd-noti-token
                      name: slack-token

              - apiVersion: networking.istio.io/v1beta1
                kind: Gateway
                metadata:
                  name: argocd
                spec:
                  selector:
                    istio: ingressgateway
                  servers:
                    - hosts:
                        - "{{argocd.hostname}}"
                        - "argocd-applicationset.{{hostname.public}}"
                      port:
                        number: 80
                        name: http
                        protocol: HTTP

              - apiVersion: networking.istio.io/v1beta1
                kind: VirtualService
                metadata:
                  name: argocd
                spec:
                  hosts:
                    - "{{argocd.hostname}}"
                  gateways:
                    - argocd
                  http:
                    - route:
                        - destination:
                            host: argocd-server
                            port:
                              number: 80

              - apiVersion: networking.istio.io/v1beta1
                kind: VirtualService
                metadata:
                  name: argocd-applicationset
                spec:
                  hosts:
                    - "argocd-applicationset.{{hostname.public}}"
                  gateways:
                    - argocd-applicationset
                  http:
                    - route:
                        - destination:
                            host: argocd-applicationset
                            port:
                              number: 7000

      syncPolicy:
        # automated:
        #   prune: true
        #   selfHeal: true
        syncOptions:
          - CreateNamespace=true
