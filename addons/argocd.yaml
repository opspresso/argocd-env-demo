apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argocd
spec:
  generators:
    - git:
        repoURL: https://github.com/opspresso/argocd-env-demo.git
        revision: HEAD
        files:
          - path: "env/ops/alpha/*.yaml"

  template:
    metadata:
      name: "argocd"
      annotations:
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: noti-argocd-{{cluster_env}}-addon
      labels:
        app.kubernetes.io/instance: "addons-{{cluster}}"
        krmt.io/cluster: "{{cluster}}"
        krmt.io/group: "addons"
    spec:
      project: addons
      destination:
        name: "{{cluster}}"
        namespace: argocd
      source:
        repoURL: https://argoproj.github.io/argo-helm
        targetRevision: "4.2.1"
        chart: argo-cd
        helm:
          values: |-
            fullnameOverride: argocd

            controller:
              resources:
                requests:
                  cpu: 250m
                  memory: 512Mi
                limits:
                  cpu: 500m
                  memory: 1Gi

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            server:
              replicas: 2

              autoscaling:
                enabled: true
                minReplicas: 2
                maxReplicas: 4
                targetCPUUtilizationPercentage: 60
                targetMemoryUtilizationPercentage: 60

              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 200m
                  memory: 512Mi

              service:
                type: LoadBalancer
                annotations:
                  external-dns.alpha.kubernetes.io/hostname: "{{argocd.hostname}}"
                  service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
                  service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
                  service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "{{argocd.acm_arn}}"
                  service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"

              extraArgs:
                - --insecure

              config:
                url: https://{{argocd.hostname}}

                statusbadge.enabled: "true"

                help.chatUrl: "{{argocd.chatUrl}}"
                help.chatText: "Chat now!"

                dex.config: |
                  connectors:
                  - type: github
                    id: github
                    name: github
                    config:
                      clientID: $dex.github.clientId
                      clientSecret: $dex.github.clientSecret
                      teamNameField: slug
                      orgs:
                        - name: {{argocd.github.org}}
                  staticClients:
                  - id: argo-workflows-sso
                    name: Argo Workflow
                    redirectURIs:
                      - https://argo-workflows.{{hostname.public}}/oauth2/callback
                    secretEnv: ARGO_WORKFLOWS_SSO_CLIENT_SECRET

              rbacConfig:
                policy.default: "role:readonly"
                policy.csv: |
                  g, {{argocd.github.org}}:{{argocd.github.team}}, role:admin

              additionalProjects:
                - name: addons
                  namespace: argocd
                  description: addons project
                  sourceRepos:
                    - "*"
                  destinations:
                    - namespace: "*"
                      server: "*"
                  clusterResourceWhitelist:
                    - group: "*"
                      kind: "*"

                - name: apps
                  namespace: argocd
                  description: apps project
                  sourceRepos:
                    - "*"
                  destinations:
                    - namespace: "*"
                      server: "*"
                  clusterResourceWhitelist:
                    - group: "*"
                      kind: "*"

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            repoServer:
              replicas: 2

              autoscaling:
                enabled: true
                minReplicas: 2
                maxReplicas: 4
                targetCPUUtilizationPercentage: 60
                targetMemoryUtilizationPercentage: 60

              resources:
                requests:
                  cpu: 250m
                  memory: 512Mi
                limits:
                  cpu: 500m
                  memory: 1Gi

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            dex:
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
                limits:
                  cpu: 100m
                  memory: 256Mi

              env:
                - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: argocd-secret
                      key: argo-workflows-client-secret

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  interval: 30s
                  selector:
                    release: prometheus-{{cluster}}

            redis:
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
                limits:
                  cpu: 100m
                  memory: 256Mi

            notifications:
              argocdUrl: https://{{argocd.hostname}}

              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
                limits:
                  cpu: 100m
                  memory: 256Mi

              secret:
                create: false

              subscriptions:
                # For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/

                - recipients:
                  - slack:sandbox
                  triggers:
                  - on-deployed
                  - on-health-degraded
                  - on-sync-failed
                  - on-sync-running
                  - on-sync-status-unknown
                  - on-sync-succeeded

              templates:
                # For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/

                template.app-deployed: |
                  email:
                    subject: Application {{.app.metadata.name}} has deployed.
                  message: |
                    {{if eq .serviceType "slack"}}:argocd-done:{{end}} `{{.app.metadata.name}}` has `deployed`.
                  slack:
                    attachments: |
                      [{
                        "title": "{{.app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "good",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        },
                        {
                          "title": "Revision",
                          "value": "{{.app.status.sync.revision}}",
                          "short": true
                        },
                        {
                          "title": "Images",
                          "value": "{{ range .app.status.summary.images }}- {{.}}\n{{end}}",
                          "short": false
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                template.app-health-degraded: |
                  email:
                    subject: Application {{.app.metadata.name}} has degraded.
                  message: |
                    {{if eq .serviceType "slack"}}:argocd-failed:{{end}} `{{.app.metadata.name}}` has `degraded`.
                  slack:
                    attachments: |-
                      [{
                        "title": "{{.app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "danger",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                template.app-sync-failed: |
                  email:
                    subject: Application {{.app.metadata.name}} sync failed.
                  message: |
                    {{if eq .serviceType "slack"}}:argocd-failed:{{end}} `{{.app.metadata.name}}` sync `failed` at {{.app.status.operationState.finishedAt}}
                    with the following error: {{.app.status.operationState.message}}
                  slack:
                    attachments: |-
                      [{
                        "title": "{{.app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "danger",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                template.app-sync-running: |
                  email:
                    subject: Application {{.app.metadata.name}} sync running.
                  message: |
                    {{if eq .serviceType "slack"}}:argocd-running:{{end}} `{{.app.metadata.name}}` sync `running` at {{.app.status.operationState.startedAt}}.
                  slack:
                    attachments: |-
                      [{
                        "title": "{{.app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "warning",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        },
                        {
                          "title": "Images",
                          "value": "{{ range .app.status.summary.images }}- {{.}}\n{{end}}",
                          "short": false
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                template.app-sync-status-unknown: |
                  email:
                    subject: Application {{.app.metadata.name}} sync status is 'unknown'
                  message: |
                    {{if eq .serviceType "slack"}}:argocd-failed:{{end}} `{{.app.metadata.name}}` sync status is `unknown`.
                  slack:
                    attachments: |-
                      [{
                        "title": "{{.app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "danger",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                template.app-sync-succeeded: |
                  email:
                    subject: Application {{.app.metadata.name}} sync succeeded.
                  message: |
                    {{if eq .serviceType "slack"}}:argocd-done:{{end}} `{{.app.metadata.name}}` sync `succeeded` at {{.app.status.operationState.finishedAt}}.
                  slack:
                  slack:
                    attachments: |-
                      [{
                        "title": "{{.app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "good",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        },
                        {
                          "title": "Images",
                          "value": "{{ range .app.status.summary.images }}- {{.}}\n{{end}}",
                          "short": false
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]

              triggers:
                # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/

                trigger.on-deployed: |
                  - description: Application is synced and healthy. Triggered once per commit.
                    oncePer: app.status.sync.revision
                    send:
                    - app-deployed
                    when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
                trigger.on-health-degraded: |
                  - description: Application has degraded
                    send:
                    - app-health-degraded
                    when: app.status.health.status == 'Degraded'
                trigger.on-sync-failed: |
                  - description: Application syncing has failed
                    send:
                    - app-sync-failed
                    when: app.status.operationState.phase in ['Error', 'Failed']
                trigger.on-sync-running: |
                  - description: Application is being synced
                    send:
                    - app-sync-running
                    when: app.status.operationState.phase in ['Running']
                trigger.on-sync-status-unknown: |
                  - description: Application status is 'Unknown'
                    send:
                    - app-sync-status-unknown
                    when: app.status.sync.status == 'Unknown'
                trigger.on-sync-succeeded: |
                  - description: Application syncing has succeeded
                    send:
                    - app-sync-succeeded
                    when: app.status.operationState.phase in ['Succeeded']

                # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/#default-triggers

                defaultTriggers: |
                  - on-sync-status-unknown

            configs:
              secret:
                createSecret: false

              repositories:
                - name: env-demo
                  type: git
                  url: https://github.com/opspresso/argocd-env-demo
                - name: opspresso
                  type: helm
                  url: https://opspresso.github.io/helm-charts

            extraObjects:
              - apiVersion: kubernetes-client.io/v1
                kind: ExternalSecret
                metadata:
                  name: argocd-secret
                spec:
                  backendType: systemManager
                  data:
                    - key: /k8s/common/argocd-password
                      name: admin.password
                    - key: /k8s/common/argocd-mtime
                      name: admin.passwordMtime
                    - key: /k8s/{{argocd.github.org}}/argocd-github-id
                      name: dex.github.clientId
                    - key: /k8s/{{argocd.github.org}}/argocd-github-secret
                      name: dex.github.clientSecret
                    - key: /k8s/common/argocd-webhook
                      name: webhook.github.secret
                    - key: /k8s/common/argocd-server-secret
                      name: server.secretkey
                    - key: /k8s/common/google-id
                      name: dex.google.clientId
                    - key: /k8s/common/google-secret
                      name: dex.google.clientSecret
                    - key: /k8s/common/argo-workflows-client-secret
                      name: argo-workflows-client-secret

              - apiVersion: kubernetes-client.io/v1
                kind: ExternalSecret
                metadata:
                  name: argocd-notifications-secret
                spec:
                  backendType: systemManager
                  data:
                    - key: /k8s/common/argocd-noti-token
                      name: slack-token

              - apiVersion: networking.istio.io/v1beta1
                kind: Gateway
                metadata:
                  name: argocd
                spec:
                  selector:
                    istio: ingressgateway
                  servers:
                    - hosts:
                        - "{{argocd.hostname}}"
                        - "argocd-applicationset.{{hostname.public}}"
                      port:
                        number: 80
                        name: http
                        protocol: HTTP

              - apiVersion: networking.istio.io/v1beta1
                kind: VirtualService
                metadata:
                  name: argocd
                spec:
                  hosts:
                    - "{{argocd.hostname}}"
                  gateways:
                    - argocd
                  http:
                    - route:
                        - destination:
                            host: argocd-server
                            port:
                              number: 80

              - apiVersion: networking.istio.io/v1beta1
                kind: VirtualService
                metadata:
                  name: argocd-applicationset
                spec:
                  hosts:
                    - "argocd-applicationset.{{hostname.public}}"
                  gateways:
                    - argocd-applicationset
                  http:
                    - route:
                        - destination:
                            host: argocd-applicationset
                            port:
                              number: 7000

      syncPolicy:
        # automated:
        #   prune: true
        #   selfHeal: true
        syncOptions:
          - CreateNamespace=true
